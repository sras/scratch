use std::str::FromStr;
use crate::types::mdyn_to_concrete;
use crate::types::MType;
use crate::types::DynMType;
use crate::types::DynMType::*;
use crate::types::MType::*;
use crate::types::ConcreteType;
use crate::types::Instruction;
use crate::types::ArgValue;
use crate::types::ArgValue::*;
use crate::types::ArgConstraint;
use crate::types::ArgConstraint::*;
use crate::types::SomeValue;
use crate::types::SomeValue::*;
use crate::types::AtomicValue;
use crate::types::AtomicValue::*;
use crate::types::MAtomic;
use crate::types::MAtomic::*;
use crate::types::CompositeValue;
use crate::types::CompositeValue::*;
use crate::types::StackResultElem;
use crate::types::StackResultElem::*;
use crate::types::CompoundInstruction;
use crate::types::Attribute;
use crate::types::Attribute::*;
use crate::types::SomeKeyValue;
use crate::types::Contract;

grammar;

Attribute: Attribute = {
  "comparable" => Comparable,
  "passable" => Passable,
  "pushable" => Pushable,
  "storable" => Storable,
  "packable" => Packable,
  "bigmapvalue" => BigmapValue,
  "duplicable" => Duplicable
}

AttributeList: Vec<Attribute> = {
  <atr:Attribute>"+"<mut atrl:AttributeList> => { atrl.insert(0, atr); atrl },
  <atr:Attribute> => vec![atr],
}

CompoundInstruction: CompoundInstruction<SomeValue> = {
  "FAIL" => CompoundInstruction::FAIL,
  "SELF" => CompoundInstruction::SELF,
  "IF" <ibt:InstructionBlock> <ibf:InstructionBlock> => CompoundInstruction::IF(ibt, ibf),
  "ITER" <inst:InstructionBlock> => CompoundInstruction::ITER(inst),
  "IF_CONS" <ibt:InstructionBlock> <ibf:InstructionBlock> => CompoundInstruction::IF_CONS(ibt, ibf),
  "IF_SOME" <ibt:InstructionBlock> <ibf:InstructionBlock> => CompoundInstruction::IF_SOME(ibt, ibf),
  "IF_NONE" <ibt:InstructionBlock> <ibf:InstructionBlock> => CompoundInstruction::IF_NONE(ibt, ibf),
  "IF_LEFT" <ibt:InstructionBlock> <ibf:InstructionBlock> => CompoundInstruction::IF_LEFT(ibt, ibf),
  "DIP" <n:McLitNumber> <instr:InstructionBlock> => CompoundInstruction::DIP(usize::try_from(n).unwrap(), instr),
  "DIP" <instr:InstructionBlock> => CompoundInstruction::DIP(1, instr),
  <s:r"D[I]+P"> <instr:InstructionBlock> => CompoundInstruction::DIP(s.len() - 2, instr),
  "LAMBDA_REC" <ty1:ConcreteType> <ty2:ConcreteType> <instr:InstructionBlock> => CompoundInstruction::LAMBDA_REC(ty1, ty2, instr),
  <si:Instruction> => CompoundInstruction::Other(si)
}

match {
  "IF",
  "SELF",
  "LAMBDA_REC",
  "ITER",
  "FAIL",
  "IF_CONS",
  "IF_SOME",
  "IF_NONE",
  "IF_LEFT",
  "DIP",
  r"D[I]+P",
} else {
  r"[A-Z_]+",
  _
}

Identifier: String = <s:r"[A-Z_]+"> => String::from(s);

pub Contract: Contract<SomeValue> =  {
  "parameter" <p:ConcreteType>";" "storage" <s:ConcreteType>";" "code" <c:InstructionBlock> => {
    Contract { parameter: p, storage: s, code: c }
  }}

Instruction: Instruction<SomeValue> = {
  <s:Identifier> <b:AnnotationList> <a:Args> => Instruction { name : s, args: a },
  <s:Identifier> <a:Args> => Instruction { name : s, args: a },
  <s:Identifier> <b:AnnotationList> => Instruction { name : s, args: vec![] },
  <s:Identifier> => Instruction { name : s, args: vec![] },
}

Arg: ArgValue<SomeValue> = {
  <v:SomeValue> => ValueArg(v),
  <t:ConcreteType> => TypeArg(t)
}

Args: Vec<ArgValue<SomeValue>> = {
  <h:Arg> <mut t:Args> => { t.insert(0, h); t },
  <s:Arg> => vec!(s),
}

SomeValue: SomeValue = {
  <a:AtomicValue> => Atomic(a),
  <a:CompositeValue> => Composite(Box::new(a)),
  "("<s:SomeValue>")" => s
}

AtomicValue: AtomicValue = {
  <a:McLitNumber> => AVNumber(a),
  <s:McLitString> => AVString(s),
  <s:McLitBool> => AVBool(s),
  "Unit" => AVUnit
}

CompositeValue: CompositeValue = {
  "Pair" <l: SomeValue> <r: SomeValue> => CVPair(l, r),
  "{"<sv:SomeKeyValueList>"}" => CKVList(sv),
  "{"<sv:SomeValueList>"}" => CVList(sv),
  <ins:InstructionBlock> => CVLambda(ins)
}

InstructionBlock: Vec<CompoundInstruction<SomeValue>> = {
  "{"<ins:InstructionList>"}" => ins
}

SomeValueList:Vec<SomeValue> = {
  <sv:SomeValue> => vec!(sv),
  <sv:SomeValue>";"<mut svl:SomeValueList> => { svl.insert(0, sv); svl },
  <sv:SomeValue>";" => vec!(sv)
}

SomeKeyValue:(SomeValue, SomeValue) = {
  "Elt" <svk:SomeValue> <svv:SomeValue> => (svk, svv)
}

SomeKeyValueList:Vec<SomeKeyValue> = {
  <sv:SomeKeyValue> => vec!(sv),
  <sv:SomeKeyValue>";"<mut svl:SomeKeyValueList> => { svl.insert(0, sv); svl },
  <sv:SomeKeyValue>";" => vec!(sv)
}

pub InstructionList:Vec<CompoundInstruction<SomeValue>> = {
  <i:CompoundInstruction> => vec!(i),
  <i:CompoundInstruction>";"<mut is:InstructionList> => { is.insert(0, i); is },
  <i:CompoundInstruction>";" => vec!(i),
}

pub AtomicType: MAtomic = {
  <a:AtomicTypeRaw><x:Annotation> => a,
  <a:AtomicTypeRaw> => a
}

pub AnnotationList: () = {
  <a:Annotation><b:AnnotationList> => (),
  <a:Annotation> => ()
}

AtomicTypeRaw: MAtomic = {
  "int" => MInt,
  "nat" => MNat,
  "key" => MKey,
  "key_hash" => MKeyHash,
  "chain_id" => MChainId,
  "bytes" => MBytes,
  "string" => MString,
  "bool" => MBool,
  "mutez" => MMutez,
  "timestamp" => MTimestamp,
  "address" => MAddress,
  "operation" => MOperation,
  "signature" => MSignature,
  "unit" => MUnit,
};

pub ConcreteType: ConcreteType = {
  <t:MDyn> => mdyn_to_concrete(&t)
};

pub MDynList: Vec<MType<DynMType>> = {
  <h:MDyn>";"<mut t:MDynList> => { t.insert(0, h); t },
  <s:MDyn> => vec!(s),
  }

pub MDyn: MType<DynMType> = {
  <t:AtomicType> => MWrapped(DMAtomic(t)),
  <t:Dyn> => MWrapped(DMDyn(t)),
  "list" <a:AnnotationList> <t1:MDyn> => MList (Box::new(t1)),
  "list" <t1:MDyn> => MList (Box::new(t1)),
  "set" <t1:MDyn> => MSet (Box::new(t1)),
  "option" <a:AnnotationList> <t1:MDyn> => MOption (Box::new(t1)),
  "option" <t1:MDyn> => MOption (Box::new(t1)),
  "contract" <a:AnnotationList> <t1:MDyn> => MContract (Box::new(t1)),
  "contract" <t1:MDyn> => MContract (Box::new(t1)),
  "pair" <a:AnnotationList> <t1:MDyn> <t2:MDyn> => MPair(Box::new((t1, t2))),
  "pair" <t1:MDyn> <t2:MDyn> => MPair(Box::new((t1, t2))),
  "or" <a:AnnotationList> <t1:MDyn> <t2:MDyn> => MOr(Box::new((t1, t2))),
  "or" <t1:MDyn> <t2:MDyn> => MOr(Box::new((t1, t2))),
  "map" <t1:MDyn> <t2:MDyn> => MMap(Box::new((t1, t2))),
  "big_map" <t1:MDyn> <t2:MDyn> => MBigMap(Box::new((t1, t2))),
  "lambda" <t1:MDyn> <t2:MDyn> => MLambda(Box::new((t1, t2))),
  "("<t:MDyn>")" => t
};

pub Constraint: ArgConstraint = {
  "w|"<v:ArgVar>"=>"<atrl:AttributeList> => CWarg(v, atrl),
  "w|"<v:ArgVar> => CWarg(v, vec![]),
  "t|"<v:ArgVar>"=>"<atrl:AttributeList> => CTypeArg(v, atrl),
  "t|"<v:ArgVar> => CTypeArg(v, vec![]),
  "r|"<v:ArgVar> => CTypeArgRef(v),
  "a|"<v:AtomicType> => CAtomic(v)
}

pub StackResultElem: StackResultElem = {
  "r|"<v:ArgVar> => TRef(v),
  "a|"<v:AtomicType> => ElemType(v)
}

ArgVar: char = <c:r"[a-z]"> => c.chars().next().unwrap();

Dyn: String = <s:r"<[A-Za-z][A-Za-z0-9_|+=>]+>"> => s[1..s.len()-1].into();

Annotation: String = <s:r"@%|@%%|%@|[@:%][_0-9a-zA-Z][_0-9a-zA-Z\.%@]*"> => String::from(s);

McLitBool: bool = {
  "True" => true,
  "False" => false,
}

McLitString: String = <s:r#""[a-z0-9]+""#> => s[1..s.len()-1].into();
McLitNumber: i32 = <s:r"([+-]?)[0-9]+"> => i32::from_str(s).unwrap();
