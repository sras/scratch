use std::str::FromStr;
use crate::types;
use crate::types::CType::*;
use crate::types::CTBox::*;
use crate::types::ConcreteType;
use crate::types::Instruction;
use crate::types::ArgValue;
use crate::types::ArgValue::*;
use crate::types::SomeValue;
use crate::types::SomeValue::*;
use crate::types::AtomicValue;
use crate::types::AtomicValue::*;
use crate::types::CompositeValue;
use crate::types::CompositeValue::*;
grammar;

pub Instruction: Instruction<SomeValue> = {
  <s:Identifier> <a:Args> => Instruction { name : s, args: a },
}

pub Arg: ArgValue<SomeValue> = {
  <v:SomeValue> => ValueArg(v),
  <t:ConcreteType> => TypeArg(t)
}

pub Args: Vec<ArgValue<SomeValue>> = {
  <h:Arg> <mut t:Args> => { t.insert(0, h); t },
  <s:Arg> => vec!(s),
}

pub SomeValue: SomeValue = {
  <a:AtomicValue> => Atomic(a),
  <a:CompositeValue> => Composite(Box::new(a))
}

pub AtomicValue: AtomicValue = {
  <a:McLitNumber> => AVNumber(a),
  <s:McLitString> => AVString(s)
}

pub CompositeValue: CompositeValue = {
  "Pair" <l: SomeValue> <r: SomeValue> => CVPair(l, r),
  "{"<ins:InstructionList>"}" => CVLambda(ins)
}

pub InstructionList:Vec<Instruction<SomeValue>> = {
  <i:Instruction> => vec!(i),
  <i:Instruction>":"<mut is:InstructionList> => { is.insert(0, i); is }
}

pub ConcreteType: ConcreteType = {
  "int" => MInt,
  "nat" => MNat,
  "pair" <t1:ConcreteType> <t2:ConcreteType> => MPair (Box::new(CTSelf( t1)), Box::new(CTSelf(t2))),
  "("<t:ConcreteType>")" => t
};

pub Identifier: String = <s:r"[a-z][a-z0-9]+"> => String::from(s);

McLitString: String = <s:r#""[a-z0-9]+""#> => s[1..s.len()-1].into();
McLitNumber: i32 = <s:r"([+-]?)[0-9]+"> => i32::from_str(s).unwrap();
