-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_myExprParser -> Exp                         (0)
	Exp -> Exp '+' Exp                                 (1)
	Exp -> Exp '-' Exp                                 (2)
	Exp -> '(' Exp ')'                                 (3)
	Exp -> Term                                        (4)
	Term -> int                                        (5)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'+'            { TkOperator OpPlus }
	'-'            { TkOperator OpMinus }
	'('            { TkDelimeter BrackOpen }
	')'            { TkDelimeter BrackClose }
	int            { TkLiteral (LiteralInt $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_myExprParser rule  0
	Exp             rules 1, 2, 3, 4
	Term            rule  5

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_myExprParser -> . Exp                        (rule 0)

	'('            shift, and enter state 4
	int            shift, and enter state 5

	Exp            goto state 6
	Term           goto state 3

State 1

	Exp -> . Exp '+' Exp                                (rule 1)

	'('            shift, and enter state 4
	int            shift, and enter state 5

	Exp            goto state 2
	Term           goto state 3

State 2

	Exp -> Exp . '+' Exp                                (rule 1)
	Exp -> Exp . '-' Exp                                (rule 2)

	'+'            shift, and enter state 7
	'-'            shift, and enter state 8


State 3

	Exp -> Term .                                       (rule 4)

	'+'            reduce using rule 4
	'-'            reduce using rule 4
	')'            reduce using rule 4
	%eof           reduce using rule 4


State 4

	Exp -> '(' . Exp ')'                                (rule 3)

	'('            shift, and enter state 4
	int            shift, and enter state 5

	Exp            goto state 9
	Term           goto state 3

State 5

	Term -> int .                                       (rule 5)

	'+'            reduce using rule 5
	'-'            reduce using rule 5
	')'            reduce using rule 5
	%eof           reduce using rule 5


State 6

	%start_myExprParser -> Exp .                        (rule 0)
	Exp -> Exp . '+' Exp                                (rule 1)
	Exp -> Exp . '-' Exp                                (rule 2)

	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	%eof           accept


State 7

	Exp -> Exp '+' . Exp                                (rule 1)

	'('            shift, and enter state 4
	int            shift, and enter state 5

	Exp            goto state 12
	Term           goto state 3

State 8

	Exp -> Exp '-' . Exp                                (rule 2)

	'('            shift, and enter state 4
	int            shift, and enter state 5

	Exp            goto state 11
	Term           goto state 3

State 9

	Exp -> Exp . '+' Exp                                (rule 1)
	Exp -> Exp . '-' Exp                                (rule 2)
	Exp -> '(' Exp . ')'                                (rule 3)

	'+'            shift, and enter state 7
	'-'            shift, and enter state 8
	')'            shift, and enter state 10


State 10

	Exp -> '(' Exp ')' .                                (rule 3)

	'+'            reduce using rule 3
	'-'            reduce using rule 3
	')'            reduce using rule 3
	%eof           reduce using rule 3


State 11

	Exp -> Exp . '+' Exp                                (rule 1)
	Exp -> Exp . '-' Exp                                (rule 2)
	Exp -> Exp '-' Exp .                                (rule 2)

	'+'            reduce using rule 2
	'-'            reduce using rule 2
	')'            reduce using rule 2
	%eof           reduce using rule 2


State 12

	Exp -> Exp . '+' Exp                                (rule 1)
	Exp -> Exp '+' Exp .                                (rule 1)
	Exp -> Exp . '-' Exp                                (rule 2)

	'+'            reduce using rule 1
	'-'            reduce using rule 1
	')'            reduce using rule 1
	%eof           reduce using rule 1


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 6
Number of terminals: 5
Number of non-terminals: 3
Number of states: 13
