{-# OPTIONS  #-}


-- parser (data) produced by Happy (GLR) Version 1.20.1.1

module MainData where



import qualified Data.Array as Happy_Data_Array
import qualified Data.Bits as Bits
import Control.Applicative(Applicative(..))
import Control.Monad (ap)



{-# LINE 1 "templates/GLR_Base.hs" #-}
{- GLR_Base.lhs
   $Id: GLR_Base.lhs,v 1.4 2004/12/04 15:01:37 paulcc Exp $
-}

-- Basic defs required for compiling the data portion of the parser

-- We're creating Int-indexed graphs

type ForestId  = (Int,Int,GSymbol)


-- Actions for the GLR machine

data GLRAction = Shift Int [Reduction]
               | Reduce [Reduction]
               | Accept
               | Error

---
-- A Reduction (s,n,f) removes the top n node-ids, creates a new branch from these
-- and labels the branch with the given symbol s. Additionally, the branch may
-- hold some semantic value.

type Reduction = (GSymbol,Int, [ForestId] -> Branch)


---
-- A Branch holds the semantic result plus node ids of children

data Branch
 = Branch {b_sem :: GSem, b_nodes :: [ForestId]}
   deriving Show

instance Eq Branch where
        b1 == b2 = b_nodes b1 == b_nodes b2



-------------------------------------------------------------------------------
-- Utilities for decoding

---
-- Tree decode unpacks the forest into a list of results
--  - this is ok for small examples, but inefficient for very large examples
--  - the data file contains further instances
--  - see documentation for further information
--  - "Decode_Result" is a synonym used to insert the monad type constr (or not)

class TreeDecode a where
        decode_b :: (ForestId -> [Branch]) -> Branch -> [Decode_Result a]

decode :: TreeDecode a => (ForestId -> [Branch]) -> ForestId -> [Decode_Result a]
decode f i@(_,_,HappyTok t)
  = decode_b f (Branch (SemTok t) [])
decode f i
  = [ d | b <- f i, d <- decode_b f b ]

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance TreeDecode UserDefTok where
--      decode_b f (Branch (SemTok t) []) = [happy_return t]

---
-- this is used to multiply the ambiguous possibilities from children

--cross_fn :: [a -> b] -> [a] -> [b]
--actual type will depend on monad in use.
--happy_ap defined by parser generator
cross_fn fs as = [ f `happy_ap` a | f <- fs, a <- as]

---
-- Label decoding unpacks from the Semantic wrapper type
--  - this allows arbitrary values (within the limits of the compiler settings)
--    to be recovered from nodes in the tree.
--  - again, more instances are written in the data file
--  - see documentation for further information

class LabelDecode a where
        unpack :: GSem -> a

---- generated by Happy, since it means expansion of synonym (not ok in H-98)
--instance LabelDecode UserDefTok where
--      unpack (SemTok t) = t




{-# LINE 102 "ParserData.hs"#-}

data Operator
  = OpPlus
  | OpMinus

data Delimeter
  = BrackOpen
  | BrackClose


data Literal
  = LiteralInt Int

data Token
  = TkOperator Operator
  | TkDelimeter Delimeter
  | TkLiteral Literal

data Exp
  = BinExpr Operator Exp Exp
  | ExpTerm Term

data Term
  = TermLiteral Literal

parseError :: [Token] -> a
parseError _ = error "There was some error"

{-# LINE 131 "ParserData.hs"#-}

data GSymbol = HappyEOF | HappyTok {-!Int-} (Token) | G_Exp 
 | G_Term 
   deriving (Show,Eq,Ord)

data GSem
 = NoSem
 | SemTok (Token) | Sem_0 (()) 
 | Sem_1 (()) 
   deriving (Show)


semfn_0_0 ns@(happy_var_1:(_,_,HappyTok (happy_var_2@(TkOperator OpPlus))):happy_rest) =  Branch (Sem_0 (BinExpr OpPlus happy_var_1 happy_var_2)) ns
semfn_0_1 ns@(happy_var_1:(_,_,HappyTok (happy_var_2@(TkOperator OpMinus))):happy_rest) =  Branch (Sem_0 (BinExpr OpMinus happy_var_1 happy_var_2)) ns
semfn_1_0 ns@((_,_,HappyTok (happy_var_1@(TkDelimeter BrackOpen))):happy_rest) =  Branch (Sem_1 (happy_var_1)) ns
semfn_1_1 ns@(happy_var_1:happy_rest) =  Branch (Sem_1 (ExpTerm happy_var_1)) ns
semfn_1_2 ns@((_,_,HappyTok ((TkLiteral (LiteralInt happy_var_1)))):happy_rest) =  Branch (Sem_1 (ExpTerm (TermLiteral (LiteralInt happy_var_1)))) ns


type Decode_Result a = a
happy_ap = ($)
happy_return = id
instance LabelDecode (()) where 
  unpack (Sem_0 s) = s
  unpack (Sem_1 s) = s


type UserDefTok = Token
instance TreeDecode (Token) where
  decode_b f (Branch (SemTok t) []) = [happy_return t]
instance LabelDecode (Token) where
  unpack (SemTok t) = t


action 0 ( HappyTok (TkDelimeter BrackOpen) ) = Shift 4 []
action 0 ( HappyTok (TkLiteral (LiteralInt _)) ) = Shift 5 []
action 1 ( HappyTok (TkDelimeter BrackOpen) ) = Shift 4 []
action 1 ( HappyTok (TkLiteral (LiteralInt _)) ) = Shift 5 []
action 2 ( HappyTok (TkOperator OpPlus) ) = Shift 7 []
action 2 ( HappyTok (TkOperator OpMinus) ) = Shift 8 []
action 3 ( HappyTok (TkOperator OpPlus) ) = Reduce [red_4]
action 3 ( HappyTok (TkOperator OpMinus) ) = Reduce [red_4]
action 3 ( HappyTok (TkDelimeter BrackClose) ) = Reduce [red_4]
action 3 ( HappyEOF ) = Reduce [red_4]
action 4 ( HappyTok (TkDelimeter BrackOpen) ) = Shift 4 []
action 4 ( HappyTok (TkLiteral (LiteralInt _)) ) = Shift 5 []
action 5 ( HappyTok (TkOperator OpPlus) ) = Reduce [red_5]
action 5 ( HappyTok (TkOperator OpMinus) ) = Reduce [red_5]
action 5 ( HappyTok (TkDelimeter BrackClose) ) = Reduce [red_5]
action 5 ( HappyEOF ) = Reduce [red_5]
action 6 ( HappyTok (TkOperator OpPlus) ) = Shift 7 []
action 6 ( HappyTok (TkOperator OpMinus) ) = Shift 8 []
action 6 ( HappyEOF ) = Accept
action 7 ( HappyTok (TkDelimeter BrackOpen) ) = Shift 4 []
action 7 ( HappyTok (TkLiteral (LiteralInt _)) ) = Shift 5 []
action 8 ( HappyTok (TkDelimeter BrackOpen) ) = Shift 4 []
action 8 ( HappyTok (TkLiteral (LiteralInt _)) ) = Shift 5 []
action 9 ( HappyTok (TkOperator OpPlus) ) = Shift 7 []
action 9 ( HappyTok (TkOperator OpMinus) ) = Shift 8 []
action 9 ( HappyTok (TkDelimeter BrackClose) ) = Shift 10 []
action 10 ( HappyTok (TkOperator OpPlus) ) = Reduce [red_3]
action 10 ( HappyTok (TkOperator OpMinus) ) = Reduce [red_3]
action 10 ( HappyTok (TkDelimeter BrackClose) ) = Reduce [red_3]
action 10 ( HappyEOF ) = Reduce [red_3]
action 11 ( HappyTok (TkOperator OpPlus) ) = Reduce [red_2]
action 11 ( HappyTok (TkOperator OpMinus) ) = Reduce [red_2]
action 11 ( HappyTok (TkDelimeter BrackClose) ) = Reduce [red_2]
action 11 ( HappyEOF ) = Reduce [red_2]
action 12 ( HappyTok (TkOperator OpPlus) ) = Reduce [red_1]
action 12 ( HappyTok (TkOperator OpMinus) ) = Reduce [red_1]
action 12 ( HappyTok (TkDelimeter BrackClose) ) = Reduce [red_1]
action 12 ( HappyEOF ) = Reduce [red_1]
action _ _ = Error
red_1 = (G_Exp,3 :: Int,semfn_0_0)
red_2 = (G_Exp,3 :: Int,semfn_0_1)
red_3 = (G_Exp,3 :: Int,semfn_1_0)
red_4 = (G_Exp,1 :: Int,semfn_1_1)
red_5 = (G_Term,1 :: Int,semfn_1_2)
goto 0 G_Exp = 6
goto 0 G_Term = 3

goto 1 G_Exp = 2
goto 1 G_Term = 3

goto 4 G_Exp = 9
goto 4 G_Term = 3

goto 7 G_Exp = 12
goto 7 G_Term = 3

goto 8 G_Exp = 11
goto 8 G_Term = 3

goto _ _ = -1
